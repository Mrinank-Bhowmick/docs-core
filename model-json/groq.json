{
    "provider": {
        "name": "Groq",
        "imageUrl": "",
        "description": "Groq provides Large Language Models (LLMs) for integration into applications.",
        "website": "https://groq.com",
        "slug": "groq",
        "mostCommonModels": [
            "mixtral-8x7b-32768",
            "llama3-70b-8192"
        ],
        "uptimeLatencyChartsLink": "",
        "discordCommunityLink": "https://discord.gg/n8KtCjfAug",
        "pricingLink": "https://groq.com/pricing/",
        "documentationLink": "https://console.groq.com/docs/quickstart"
    },
    "supported": {
        "models": [
            {
                "title": "Chat Completions",
                "description": "Portkey supports the chat completions API for Groq models",
                "supportedModels": [
                    "gemma2-9b-it",
                    "gemma-7b-it",
                    "llama-guard-3-8b",
                    "llama3-groq-8b-8192-tool-use-preview"
                ],
                "moreModels": "https://console.groq.com/docs/models"
            },
            {
                "title": "Vision",
                "description": "Portkey supports the vision API for Groq models",
                "supportedModels": [
                    "llava-v1.5-7b-4096-preview"
                ]
            },
            {
                "title": "Content Moderation",
                "description": "Portkey supports the content moderation API for Groq models",
                "supportedModels": [
                    "llama-guard-3-8b"
                ]
            }
        ],
        "notSupported": {
            "models": [
                {
                    "title": "Speech",
                    "description": "Portkey currently does not support the speech API for Groq models"
                }
            ]
        },
        "features": [
            {
                "title": "Tool Calling",
                "description": "Groq API endpoints support tool use for programmatic execution of specified operations through requests with explicitly defined operations",
                "link": "https://console.groq.com/docs/tool-use"
            },
            {
                "title": "Json Mode",
                "description": "JSON mode is a feature that guarantees all chat completions are valid JSON.",
                "link": "https://console.groq.com/docs/text-chat"
            }
        ],
        "integration": {
            "textCall": {
                "portkeyPythonSDK": {
                    "description": "Use Portkey Python SDK to make text calls to Groq chat completions models like Gemma and Mixtral",
                    "codeExample": "sample python code for gemma-7b-it text call on Groq"
                },
                "portkeyNodeSDK": {
                    "description": "Use Portkey Node.js SDK to make text calls to Groq chat completions models like Gemma and Mixtral",
                    "codeExample": "sample node.js code for gemma-7b-it text call on Groq"
                },
                "restAPI": {
                    "description": "Use Portkey's REST API to make text calls to Groq chat completions models like Gemma and Mixtral",
                    "codeExample": "sample rest api code for gemma-7b-it text call on Groq"
                },
                "openAIPythonSDK": {
                    "description": "Use OpenAI Python SDK to make text calls to Groq chat completions models like Gemma and Mixtral",
                    "codeExample": "sample openai SDK python code for gemma-7b-it text call on Groq"
                },
                "openAINodeSDK": {
                    "description": "Use OpenAI Node.js SDK to make text calls to Groq chat completions models like Gemma and Mixtral",
                    "codeExample": "sample openai SDK node.js code for gemma-7b-it text call on Groq"
                }
            },
            "visionCall": {
                "portkeyPythonSDK": {
                    "description": "Use Portkey Python SDK to make vision calls to Groq vision models like Llava",
                    "codeExample": "sample python code for llava-v1.5-7b-4096-preview vision call on Groq"
                },
                "portkeyNodeSDK": {
                    "description": "Use Portkey Node.js SDK to make vision calls to Groq vision models like Llava",
                    "codeExample": "sample node.js code for llava-v1.5-7b-4096-preview vision call on Groq"
                },
                "restAPI": {
                    "description": "Use Portkey's REST API to make vision calls to Groq vision models like Llava",
                    "codeExample": "sample rest api code for llava-v1.5-7b-4096-preview vision call on Groq"
                },
                "openAIPythonSDK": {
                    "description": "Use OpenAI Python SDK to make vision calls to Groq vision models like Llava",
                    "codeExample": "sample openai SDK python code for llava-v1.5-7b-4096-preview vision call on Groq"
                },
                "openAINodeSDK": {
                    "description": "Use OpenAI Node.js SDK to make vision calls to Groq vision models like Llava",
                    "codeExample": "sample openai SDK node.js code for llava-v1.5-7b-4096-preview vision call on Groq"
                }
            },
            "integrationViaVirtualKey": {
                "description": "Integrate Groq using Portkey's virtual key system",
                "generateVirtualKey": {
                    "inline": {
                        "text": "Get your API key from Groq and add it to Portkey to create a virtual key.",
                        "screenshot": "insert screenshot here",
                        "description": "You can get your Groq API key from the Groq console [here](https://console.groq.com/keys)."
                    }
                },
                "portkeyPythonSDK": {
                    "description": "Initialize Portkey with the virtual key in Python",
                    "codeExample": "sample python SDK code for  gemma-7b-it chat completions call on Groq using virtual key"
                },
                "portkeyNodeSDK": {
                    "description": "Initialize Portkey with the virtual key in Node.js",
                    "codeExample": "sample node.js SDK code for gemma-7b-it chat completions call on Groq using virtual key"
                },
                "restAPI": {
                    "description": "Use Portkey's REST API to make text calls to Groq chat completions models like Gemma and Mixtral",
                    "codeExample": "sample rest api code for gemma-7b-it chat completions call on Groq using virtual key"
                },
                "openAIPythonSDK": {
                    "description": "Use OpenAI Python SDK to make text calls to Groq chat completions models like Gemma and Mixtral",
                    "codeExample": "sample openai SDK python code for gemma-7b-it chat completions call on Groq using virtual key"
                },
                "openAINodeSDK": {
                    "description": "Use OpenAI Node.js SDK to make text calls to Groq chat completions models like Gemma and Mixtral",
                    "codeExample": "sample openai SDK node.js code for gemma-7b-it chat completions call on Groq using virtual key"
                }
            },
            "promptPlayground": {
                "description": "Manage and test prompts for Groq models in the Prompt Library",
                "screenshot": "insert screenshot here",
                "portkeyPythonSDK": {
                    "description": "Use prompts from the Prompt Library in Python",
                    "codeExample": "sample python SDK code for using prompts from the Prompt Library on Groq"
                },
                "portkeyNodeSDK": {
                    "description": "Use prompts from the Prompt Library in Node.js",
                    "codeExample": "sample node.js SDK code for using prompts from the Prompt Library on Groq"
                },
                "restAPI": {
                    "description": "Use Portkey's REST API to manage and test prompts for Groq models in the Prompt Library",
                    "codeExample": "sample rest api code for using prompts from the Prompt Library on Groq"
                },
                "openAIPythonSDK": {
                    "description": "Not supported",
                    "codeExample": "not supported"
                },
                "openAINodeSDK": {
                    "description": "Not supported",
                    "codeExample": "not supported"
                }
            }
        },
        "specialExamples": [
            {
                "title": "Chat Completion with Tool call",
                "description": "Use Portkey's REST API to make a chat completion call to Groq with a tool call",
                "portkeyPythonSDK": {
                    "description": "Make a chat completion tool call to Groq",
                    "codeExample": "sample python SDK code for tool use on Groq"
                },
                "portkeyNodeSDK": {
                    "description": "Make a chat completion tool call to Groq",
                    "codeExample": "sample node SDK code for tool use on Groq"
                },
                "restAPI": {
                    "description": "Use Portkey's REST API to make a chat completion tool call to Groq",
                    "codeExample": "sample rest api code for tool use on Groq"
                },
                "openAIPythonSDK": {
                    "description": "Using OpenAI Python SDK to make a chat completion tool call to Groq",
                    "codeExample": "sample openai python SDK code for tool use on Groq"
                },
                "openAINodeSDK": {
                    "description": "Using OpenAI Node.js SDK to make a chat completion tool call to Groq",
                    "codeExample": "sample openai node.js SDK code for tool use on Groq"
                }
            }
        ],
        "portkeyCapabilities": [
            {
                "title": "Configure Routing",
                "description": "Configure routing for your Groq requests",
                "link": "/docs/product/ai-gateway/routing"
            },
            {
                "title": "Add Metadata to Requests",
                "description": "Add metadata to your Groq requests",
                "link": "/docs/product/observability/metadata"
            },
            {
                "title": "A/B Test Different Models",
                "description": "A/B test different models",
                "link": "/docs/product/ai-gateway/load-balance"
            },
            {
                "title": "Gain Insights to Requests",
                "description": "Gain insights to your Groq requests",
                "link": "/docs/product/observability/traces"
            }
        ],
        "useCases": [],
        "additionalInfo": []
    }
}